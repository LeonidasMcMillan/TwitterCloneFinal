{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","useState","newTweets","setNewTweets","textAreaRef","React","createRef","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","name","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","send","LoadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","like","setLikes","userLike","justClicked","setJustClicked","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d186a17.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useEffect, useState} from 'react'\r\nimport {LoadTweets} from '../lookup';\r\n\r\n\r\nexport function TweetsComponent(props){\r\n\r\n    const [newTweets, setNewTweets] = useState([])\r\n\r\n    const handleSubmit = (event) =>{\r\n        event.preventDefault()\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 47\r\n            \r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = ''\r\n    }\r\n\r\n    const textAreaRef = React.createRef()\r\n\r\n    return <div className ={props.className} >\r\n                <div className= 'col-12 mb-3'>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <textarea ref ={textAreaRef} className = 'form-control' name = 'tweet' required={true}>\r\n\r\n                        </textarea>\r\n                        <button type = 'submit' className = 'btn btn-primary my-3'>Tweet</button>\r\n                    </form>\r\n                </div>\r\n            <TweetsList newTweets={newTweets}/>\r\n            </div>\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] =useState([])\r\n\r\n    const [tweets, setTweets] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        const final = [...props.newTweets].concat(tweetsInit)\r\n        if ( final.length !== tweets.length){\r\n            setTweets(final)\r\n        }\r\n        setTweetsInit()\r\n    },[props.newTweets, tweets, tweetsInit])   \r\n    \r\n    //setTweetsInit([...props.newTweets].concat(tweetsInit))\r\n    useEffect(() => {\r\n  \r\n      const myCallback = (response, status) => {\r\n        if (status === 200){\r\n          setTweetsInit(response)\r\n        }\r\n        else {\r\n          alert(\"There was an error.\")\r\n        }\r\n      }\r\n  \r\n      LoadTweets(myCallback)\r\n      \r\n    }, [tweetsInit]\r\n    )\r\n  \r\n    return tweets.map((item, index) => {\r\n      return <Tweet tweet={item} className ='my-5 py-5 border bg-white test-dark' key={`${index}-${item.id}`} />\r\n    })\r\n  }\r\n  \r\n  \r\n\r\nexport function ActionBtn(props){\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.like : 0)\r\n    const [justClicked, setJustClicked] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className: 'btn btn-primary btn-small'\r\n    const actionDisplay = action.display ? action.display : \"Action\"\r\n    \r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (justClicked === true) {\r\n                setLikes(likes-1)\r\n                setJustClicked(false)\r\n            }\r\n            else {\r\n                setLikes(tweet.likes+1)\r\n                setJustClicked(true)\r\n            }\r\n            setLikes(tweet.likes+1)\r\n        }\r\n    }\r\n\r\n    const display = action.type ==='like' ? `${tweet.likes} ${actionDisplay}` : actionDisplay\r\n\r\n    return <button className={className} onClick={handleClick}>{display}</button> \r\n}\r\n  \r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n      <p>{tweet.id} - {tweet.content}</p>\r\n      <div className='btn btn-group'>\r\n        <ActionBtn tweet={tweet} action={{type: \"like\", display:\"Likes\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n        <ActionBtn tweet={tweet} action={{type: \"retweet\", display:\"Retweet\"}}/>\r\n      </div>\r\n       </div>\r\n  }\r\n  ","\r\n\r\nexport function LoadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = \"http://127.0.0.1:8000/api/tweets\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method,url) \r\n    xhr.onload = function() {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function () {\r\n      callback({\"message\": \"The request was an error.\"}, 400)\r\n    }\r\n    xhr.send()\r\n  \r\n  }\r\n  ","import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\nimport {TweetsComponent} from './tweets';\n\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {TweetsComponent} from './tweets'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}